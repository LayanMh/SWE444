import '../services/attendance_service.dart';
import '../services/notifications_service.dart';

/// MicrosoftCalendarEvent must expose: id, subject, start, end, courseCode (or extract).
class AbsenceCalculator {
  /// Filter your loaded events to the course, then compute % and notify if > 20.
  static Future<double> computeAndNotify({
    required String courseId,
    required List<MicrosoftCalendarEvent> allEvents,
    bool notify = true,
  }) async {
    // 1) Events for this course
    final courseEvents = allEvents.where((e) {
      final code = (_extractCourse(e) ?? '').toUpperCase();
      return code == courseId.toUpperCase();
    }).toList();

    if (courseEvents.isEmpty) return 0.0;

    // 2) Exceptions from Firestore for this course
    final exceptions = await AttendanceService.getCourseExceptions(courseId);

    // 3) Count absent + cancelled for ONLY events that exist in the schedule
    int absent = 0, cancelled = 0;
    for (final e in courseEvents) {
      final status = exceptions[e.id];
      if (status == 'absent') absent++;
      if (status == 'cancelled') cancelled++;
    }

    // 4) Denominator excludes cancelled
    final total = courseEvents.length;
    final effective = (total - cancelled).clamp(1, 1 << 30);
    final pct = absent * 100.0 / effective;

    // 5) Notify once when crossing 20%
    if (notify && pct > 20) {
      final should = await AttendanceService.shouldWarn(courseId, pct);
      if (should) {
        await NotificationsService.show(
          id: courseId.hashCode,
          title: 'Warning: $courseId attendance',
          body: 'Absences are ${pct.toStringAsFixed(1)}% (>${20}%).',
        );
      }
    }
    return pct;
  }

  // If you donâ€™t store the code on the event, keep your regex extractor:
  static String? _extractCourse(MicrosoftCalendarEvent e) {
    if (e.courseCode != null && e.courseCode!.isNotEmpty) return e.courseCode!;
    final s = (e.subject).toUpperCase();
    final m = RegExp(r'[A-Z]{2,}\s?\d{2,}').firstMatch(s);
    return m?.group(0)?.replaceAll(' ', '');
  }
}
